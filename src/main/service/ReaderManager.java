package main.service;


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import main.domain.Reader;

public class ReaderManager
{

    private Connection connection;

    private String url = "jdbc:hsqldb:hsql://localhost/mzweigert";

    private String createTableReader = "CREATE TABLE Reader(idReader bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name varchar(20), surname varchar(20), join_date Date, extra_points int)";

    private PreparedStatement addReaderStmt;
    private PreparedStatement deleteAllReadersStmt;
    private PreparedStatement getAllReadersStmt;

    private Statement statement;

    public ReaderManager()
    {
        try
        {
            connection = DriverManager.getConnection(url);
            statement = connection.createStatement();

            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next())
            {
                if ("Reader".equalsIgnoreCase(rs.getString("TABLE_NAME")))
                {
                    tableExists = true;
                    break;
                }
            }

            if (!tableExists)
                statement.executeUpdate(createTableReader);

            addReaderStmt = connection.prepareStatement("INSERT INTO Reader (name, surname, join_date, extra_points) VALUES (?, ?, ?, ?)");
            deleteAllReadersStmt = connection.prepareStatement("DELETE FROM Reader");
            getAllReadersStmt = connection.prepareStatement("SELECT idReader, name, surname, join_date, extra_points FROM Reader");

        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
    }

    Connection getConnection()
    {
        return connection;
    }

    void clearReaders()
    {
        try
        {
            deleteAllReadersStmt.executeUpdate();
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
    }

    public int addReader(Reader Reader)
    {
        int count = 0;
        try
        {
            addReaderStmt.setString(1, Reader.getName());
            addReaderStmt.setString(2, Reader.getSurname());
            addReaderStmt.setDate(3, Reader.getJoinDate());
            addReaderStmt.setInt(4, Reader.getExtraPoints());

            count = addReaderStmt.executeUpdate();

        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        return count;
    }

    public List<Reader> getAllReaders()
    {
        List<Reader> readers = new ArrayList<Reader>();

        try
        {
            ResultSet rs = getAllReadersStmt.executeQuery();

            while (rs.next())
            {
                Reader reader = new Reader(rs.getInt("idReader"), rs.getString("name"), rs.getString("surname"), rs.getDate("join_date"), rs.getInt("extra_points"));
                readers.add(reader);
            }

        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        return readers;
    }

}