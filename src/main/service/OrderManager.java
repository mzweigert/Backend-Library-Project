package main.service;


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import main.domain.Order;

public class OrderManager
{

    private Connection connection;

    private String url = "jdbc:hsqldb:hsql://localhost/mzweigert";

    private String createTableOrder = "CREATE TABLE Order(idOrder bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"+
                                                          "FOREIGN KEY REFERENCES Book(idBook),"+
                                                          "FOREIGN KEY REFERENCES Reader(idReader),"+
                                                          "order_date Date)";

    private PreparedStatement addOrderStmt;
    private PreparedStatement deleteAllOrdersStmt;
    private PreparedStatement getAllOrdersStmt;

    private Statement statement;

    public OrderManager()
    {
        try
        {
            connection = DriverManager.getConnection(url);
            statement = connection.createStatement();

            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next())
            {
                if ("Order".equalsIgnoreCase(rs.getString("TABLE_NAME")))
                {
                    tableExists = true;
                    break;
                }
            }

            if (!tableExists)
                statement.executeUpdate(createTableOrder);

            addOrderStmt = connection.prepareStatement("INSERT INTO Order (idBook, idReader, order_date) VALUES (?, ?, ?)");
            deleteAllOrdersStmt = connection.prepareStatement("DELETE FROM Order");
            getAllOrdersStmt = connection.prepareStatement("SELECT idOrder, idBook, idReader, order_date FROM Order");

        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
    }

    Connection getConnection()
    {
        return connection;
    }

    void clearOrders()
    {
        try
        {
            deleteAllOrdersStmt.executeUpdate();
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
    }

    public int addOrder(Order order)
    {
        int count = 0;
        try
        {
            addOrderStmt.setInt(1, order.getIdBook());
            addOrderStmt.setInt(2, order.getIdReader());
            addOrderStmt.setDate(3, order.getOrderDate());


            count = addOrderStmt.executeUpdate();

        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        return count;
    }

    public List<Order> getAllOrders()
    {
        List<Order> orders = new ArrayList<Order>();

        try
        {
            ResultSet rs = getAllOrdersStmt.executeQuery();

            while (rs.next())
            {
                Order order = new Order(rs.getInt("idOrder"), rs.getInt("idBook"),  rs.getInt("idReader"), rs.getDate("order_date"));
                orders.add(order);
            }

        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        return orders;
    }

}