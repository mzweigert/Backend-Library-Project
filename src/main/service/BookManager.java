package main.service;


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import main.BookDAO;
import main.domain.Author;
import main.domain.Book;

public class BookManager implements BookDAO
{

    private Connection connection;

    private String url = "jdbc:sqlserver://eos.inf.ug.edu.pl;" + "databaseName=mzweigert" + ";user=mzweigert" + ";password=224667";

    private String createTableBook = "CREATE TABLE Book(idBook bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, title varchar(20), relase_date Date, relase int)";

    private PreparedStatement getAllBooksStmt;
    private PreparedStatement getBookByIdStmt;
    private PreparedStatement getBookByTitleStmt;
    private PreparedStatement updateBookStmt;
    private PreparedStatement deleteBookStmt;
    private PreparedStatement addBookStmt;

    private PreparedStatement deleteAllBooksStmt;

    private Statement statement;

    public BookManager()
    {
        try
        {
            connection = DriverManager.getConnection(url);
            statement = connection.createStatement();

            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next())
            {
                if ("Book".equalsIgnoreCase(rs.getString("TABLE_NAME")))
                {
                    tableExists = true;
                    break;
                }
            }

            if (!tableExists)
                statement.executeUpdate(createTableBook);

            getAllBooksStmt = connection.prepareStatement("SELECT idBook, title, relase_date, relase FROM Book");
            getBookByIdStmt = connection.prepareStatement("SELECT * FROM Book WHERE idBook = ?");
            getBookByTitleStmt = connection.prepareStatement("SELECT * FROM Book WHERE title = ?");
            updateBookStmt = connection.prepareStatement("UPDATE Book SET title = ?, relase_date = ?, relase = ? ");
            deleteBookStmt = connection.prepareStatement("DELETE Book WHERE idBook = ? ");
            addBookStmt = connection.prepareStatement("INSERT INTO Book (title, relase_date, relase) VALUES (?, ?, ?)");

            deleteAllBooksStmt = connection.prepareStatement("DELETE FROM Book");


        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
    }

    public Connection getConnection()
    {
        return connection;
    }



    public List<Book> getAllBooks()
    {
        List<Book> books = new ArrayList<Book>();
        Book book;
        try
        {
            ResultSet rs = getAllBooksStmt.executeQuery();

            while (rs.next())
            {
                book = new Book(rs.getString("title"), rs.getDate("relase_date"), rs.getInt("relase"));
                book.setIdBook(rs.getInt("idBook"));
                books.add(book);
            }

        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        return books;
    }

    @Override
    public Book getBookById(Book book)
    {

        try
        {
            getBookByIdStmt.setInt(1, book.getIdBook());
            ResultSet rs = getBookByIdStmt.executeQuery();

            while (rs.next())
            {
                book = new Book(rs.getString("title"), rs.getDate("relase_date"), rs.getInt("relase"));
                book.setIdBook(rs.getInt("idBook"));
                return book;
            }
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }

        return null;
    }

    @Override
    public List<Book> getBookByTitle(Book book)
    {
        List<Book> booksByTitle = new ArrayList<Book>();

        try
        {
            getBookByTitleStmt.setString(1, book.getTitle());
            ResultSet rs = getBookByTitleStmt.executeQuery();

            while (rs.next())
            {
                book = new Book(rs.getString("title"), rs.getDate("relase_date"), rs.getInt("relase"));
                book.setIdBook(rs.getInt("idBook"));
                booksByTitle.add(book);
            }

            return booksByTitle;
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }

        return null;
    }

    @Override
    public int updateBook(Book book)
    {
        int count = 0;
        try
        {
            updateBookStmt.setString(1, book.getTitle());
            updateBookStmt.setDate(2, book.getRelaseDate());
            updateBookStmt.setInt(3, book.getRelase());

            count = updateBookStmt.executeUpdate();

        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        return count;
    }

    @Override
    public int deleteBook(Book book)
    {
        int count = 0;
        try
        {
            deleteBookStmt.setInt(1, book.getIdBook());
            count = deleteBookStmt.executeUpdate();


        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }

        return count;
    }

    public int addBook(Book Book)
    {
        int count = 0;
        try
        {
            addBookStmt.setString(1, Book.getTitle());
            addBookStmt.setDate(2, Book.getRelaseDate());
            addBookStmt.setInt(3, Book.getRelase());


            count = addBookStmt.executeUpdate();

        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        return count;
    }

    public void clearBooks()
    {
        try
        {
            deleteAllBooksStmt.executeUpdate();
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
    }

}