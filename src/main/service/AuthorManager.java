package main.service;


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import main.AuthorDAO;
import main.domain.Author;

public class AuthorManager implements AuthorDAO
{

    private Connection connection;

    private String url = "jdbc:sqlserver://eos.inf.ug.edu.pl;" + "databaseName=mzweigert" + ";user=mzweigert" + ";password=224667";

    private String createTableAuthor = "CREATE TABLE Author(idAuthor bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name varchar(20), surname varchar(20))";


    private PreparedStatement getAllAuthorsStmt;
    private PreparedStatement getAuthorByIdStmt;
    private PreparedStatement getAuthorBySurnameStmt;
    private PreparedStatement updateAuthorStmt;
    private PreparedStatement deleteAuthorStmt;
    private PreparedStatement addAuthorStmt;

    private PreparedStatement deleteAllAuthorsStmt;



    private Statement statement;

    public AuthorManager()
    {
        try
        {
            connection = DriverManager.getConnection(url);
            statement = connection.createStatement();

            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next())
            {
                if ("Author".equalsIgnoreCase(rs.getString("TABLE_NAME")))
                {
                    tableExists = true;
                    break;
                }
            }

            if (!tableExists)
                statement.executeUpdate(createTableAuthor);

            getAllAuthorsStmt = connection.prepareStatement("SELECT idAuthor, name, surname FROM Author");

            getAuthorByIdStmt = connection.prepareStatement("SELECT * FROM Author WHERE idAuthor = ?");
            getAuthorBySurnameStmt = connection.prepareStatement("SELECT * FROM Author WHERE surname='?' ");
            updateAuthorStmt = connection.prepareStatement("UPDATE Author SET name='?', surname='?' WHERE idAuthor = ?");
            deleteAuthorStmt = connection.prepareStatement("DELETE Author WHERE idAuthor = ?");
            addAuthorStmt = connection.prepareStatement("INSERT INTO Author (name, surname) VALUES (?, ?)");

            deleteAllAuthorsStmt = connection.prepareStatement("DELETE FROM Author");

        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
    }
    public Connection getConnection()
    {
        return connection;
    }
    public List<Author> getAllAuthors()
    {
        List<Author> authors = new ArrayList<Author>();

        try
        {
            ResultSet rs = getAllAuthorsStmt.executeQuery();

            while (rs.next())
            {
                Author author = new Author(rs.getInt("idAuthor"), rs.getString("name"), rs.getString("surname"));
                authors.add(author);
            }
            return authors;

        }
        catch (SQLException e)
        {

            e.printStackTrace();
            return null;
        }

    }
    public Author getAuthorById(int idAuthor)
    {
        try
        {
            getAuthorByIdStmt.setInt(1, idAuthor);
            ResultSet rs = getAuthorByIdStmt.executeQuery();

            while (rs.next())
            {
                return new Author(rs.getInt("idAuthor"), rs.getString("name"), rs.getString("surname"));
            }
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }

        return null;
    }
    public List<Author> getAuthorBySurname(String surname)
    {
        List<Author> authorsBySurname = new ArrayList<Author>();

        try
        {
            getAuthorBySurnameStmt.setString(1, surname);
            ResultSet rs = getAuthorBySurnameStmt.executeQuery();

            while (rs.next())
            {
                authorsBySurname.add(new Author(rs.getInt("idAuthor"), rs.getString("name"), rs.getString("surname")));
            }

            return authorsBySurname;
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }

        return null;
    }
    public boolean updateAuthor(Author author)
    {
        try
        {
            updateAuthorStmt.setString(1, author.getName());
            updateAuthorStmt.setString(2, author.getSurname());
            updateAuthorStmt.setInt(3, author.getIdAuthor());

            updateAuthorStmt.executeUpdate();
            return true;
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
        return false;
    }
    public boolean deleteAuthor(Author author)
    {
        try
        {
            deleteAuthorStmt.setInt(1, author.getIdAuthor());
            deleteAuthorStmt.executeUpdate();
            return true;
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }

        return false;
    }
    public boolean addAuthor(Author author)
    {

        try
        {
            addAuthorStmt.setString(1, author.getName());
            addAuthorStmt.setString(2, author.getSurname());

            addAuthorStmt.executeUpdate();
            return true;
        }
        catch (SQLException e)
        {
            e.printStackTrace();
            return false;
        }

    }
    void clearAuthors()
    {
        try
        {
            deleteAllAuthorsStmt.executeUpdate();
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
    }

}